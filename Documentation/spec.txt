Name Candidates:
    - Mirage

Keywords (WIP):
    - class: Used to define new types
    - if
    - while
    - abstract
    - override
    - package
    - import

Operators (WIP):
    - +: add
    - -: subtract
    - *: multiply
    - /: divide
    - ^: power
    - &: bitwise and
    - |: bitwise or
    - xor: bitwise xor
    - inv: bitwise not
    - and: logical and
    - or: logical or
    - not: logical not
    - mod: modulo

Primitives (WIP):
    - Bool  ,  8 bits, comes with the C/C++ concept that a bool is either 0 or 1. Multiple bools can be collapsed into one byte.
    - Byte  ,  8 bits
    - Int   , 32 bits
    - Long  , 64 bits
    - Float , 32 bits
    - Double, 64 bits

Built-in Types (WIP):
    - String
    - Exception
    - Option[...]
    - Future[...]
    - Seq[...], sequence of elements, implementation chosen at compile time
    - Dict[...], dictionary (hashmap)
    - Set[...], hashtable
    - (..., ...), tuple
    - Func[..., ...], the value of any function symbol, when stored comes with a pointer to the instance. lambdas are a child type of Func[] and come with encapsulated values.
    - (), unit. Synonomous with void, but can be used as a value to maintain consistency.


Access modifiers:

public var    = public read + public write + protected read + protected write + private read + private write
public val    = public read +                protected read +                   private read
protected var =                              protected read + protected write + private read + private write
protected val =                              protected read +                   private read
readonly      = public read +                protected read +                   private read + private write
var           =                                                                 private read + private write
val           =                                                                 private read

- Readonly is the default and therefore is not a keyword; The lack of an access modifier implies readonly.
