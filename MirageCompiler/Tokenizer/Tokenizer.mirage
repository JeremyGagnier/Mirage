package MirageCompiler/Tokenizer

import Constants
import MirageCompiler/{Token, TokenType}

object Tokenizer

String validNameChars = Constants.alphabet + Constants.numbers + "_"
String validNumberChars = Constants.numbers
String validSymbolChars = "()[]{}<>+-*/=,."

String nameStarters = Constants.alphabet + "#$"
String numberStarters = Constants.numbers
String symbolStarters = validSymbolChars

FSM[TokenState, (String-1, TokenizerState), (Seq[Token], TokenizerState)] symbolFSM = FSM()
{
    // Exclusivity isn't perfectly checked because that's likely impossible. It's checked by verifying that mutual
    // scopes don't have any overlap in their type annotations. This is equivalent to smart dead code detection.
    // For instance char == "." will change String-1 char's type to String-1-Dot and validNumberChars.contains(char)
    // will change String-1 char's type to String-1-In#validNumberChars which has overlap because "." is also in
    // validNumberChars. Additionally String-1-Dot char would cause dead code detection on
    // if (not validNumberChars.contains(char)) { ... }.
    // An ephemeral state is an exclusive state that must transition. This is also compile time checked.
    addExclusiveState(TokenState.Comment, commentAction)
    addEphemeralState(TokenState.Escaped, addCharAction)
    addExclusiveState(TokenState.Float, addCharAction)
    addExclusiveState(TokenState.Int, addCharAction)
    addEphemeralState(TokenState.IntDot, addCharAction)
    addExclusiveState(TokenState.IntDotError, intDotErrorAction)
    addExclusiveState(TokenState.Name, addCharAction)
    addExclusiveState(TokenState.NameError, nameErrorAction)
    addExclusiveState(TokenState.NumberError, numberErrorAction)
    addExclusiveState(TokenState.String, addCharAction)
    addExclusiveState(TokenState.Symbol, symbolAction)
    addExclusiveState(TokenState.SymbolError, symbolErrorAction)
    addExclusiveState(TokenState.Whitespace, whitespaceAction)

    addTransition(TokenState.Comment, TokenState.Whitespace, commentToWhitespace)

    addElseTransition(TokenState.Escaped, TokenState.String)

    addTransition(TokenState.Float, TokenState.Whitespace, toWhitespace)
    addTransition(TokenState.Float, TokenState.Symbol, toSymbol)
    addTransition(TokenState.Float, TokenState.Float, numberToNumber)
    addElseTransition(TokenState.Float, TokenState.NumberError)

    addTransition(TokenState.Int, TokenState.Whitespace, toWhitespace)
    addTransition(TokenState.Int, TokenState.Symbol, intToSymbol)
    addTransition(TokenState.Int, TokenState.Int, numberToNumber)
    addTransition(TokenState.Int, TokenState.IntDot, intToIntDot)
    addElseTransition(TokenState.Int, TokenState.NumberError)

    addTransition(TokenState.IntDot, TokenState.Float, intDotToFloat)
    addTransition(TokenState.IntDot, TokenState.Name, intDotToName)
    addElseTransition(TokenState.IntDot, TokenState.IntDotError)

    addTransition(TokenState.Name, TokenState.Whitespace, toWhitespace)
    addTransition(TokenState.Name, TokenState.Symbol, toSymbol)
    addTransition(TokenState.Name, TokenState.Name, nameToName)
    addElseTransition(TokenState.Name, TokenState.NameError)

    addTransition(TokenState.String, TokenState.Whitespace, stringToWhitespace)
    addTransition(TokenState.String, TokenState.Symbol, toSymbol)
    addTransition(TokenState.String, TokenState.Escaped, stringToEscaped)

    addTransition(TokenState.Symbol, TokenState.Comment, symbolToComment)
    addTransition(TokenState.Symbol, TokenState.Int, toInt)
    addTransition(TokenState.Symbol, TokenState.Name, toName)
    addTransition(TokenState.Symbol, TokenState.String, toString)
    addTransition(TokenState.Symbol, TokenState.Symbol, symbolToSymbol)
    addTransition(TokenState.Symbol, TokenState.Whitespace, toWhitespace)
    addElseTransition(TokenState.Symbol, TokenState.SymbolError)

    addTransition(TokenState.Whitespace, TokenState.Int, toInt)
    addTransition(TokenState.Whitespace, TokenState.Name, toName)
    addTransition(TokenState.Whitespace, TokenState.String, toString)
    addTransition(TokenState.Whitespace, TokenState.Symbol, toSymbol)
}

Bool toInt((String-1 char, TokenizerState state))
{
    numberStarters.contains(char)
}

Bool toName((String-1 char, TokenizerState state))
{
    nameStarters.contains(char)
}

Bool toString((String-1 char, TokenizerState state))
{
    char == "\""
}

Bool numberToNumber((String-1 char, TokenizerState state))
{
    validNumberChars.contains(char)
}

Bool nameToName((String-1 char, TokenizerState state))
{
    validNameChars.contains(char)
}

Bool symbolToSymbol((String-1 char, TokenizerState state))
{
    validSymbolChars.contains(char)
}

Bool toWhitespace((String-1 char, TokenizerState state))
{
    char == "\n" or char == " "
}

Bool commentToWhitespace((String-1 char, TokenizerState state))
{
    char == "\n"
}

Bool stringToWhitespace((String-1 char, TokenizerState state))
{
    switch (char)
    case ("\"")
    {
        true
    }
    case ("\n")
    {
        throw TokenizerException(TokenizerExceptionType.StringNotTerminated, state.lineNum, state.columnNum, "\\n")
    }
    case
    {
        false
    }
}

Bool intToIntDot((String-1 char, TokenizerState state))
{
    char == "."
}

Bool intDotToFloat((String-1 char, TokenizerState state))
{
    Constants.numbers.contains(char)
}

Bool intDotToName((String-1 char, TokenizerState state))
{
    nameStarters.contains(char)
}

Bool symbolToComment((String-1 char, TokenizerState state))
{
    char == "/" and state.symbolText == "/"
}

Bool toSymbol((String-1 char, TokenizerState state))
{
    symbolStarters.contains(char)
}

Bool intToSymbol((String-1 char, TokenizerState state))
{
    char != "." and symbolStarters.contains(char)
}

Bool stringToEscaped((String-1 char, TokenizerState state))
{
    char == "\\"
}

(Seq[Token], TokenizerState) addCharAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    TokenizerState newState = copy (tokenizerState)
    {
        symbolText += char
        columnNum += 1
    }

    (Nil, newState)
}

(Seq[Token], TokenizerState) intDotErrorAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    throw TokenizerException(TokenizerExceptionType.UnexpectedDot, state.lineNum, state.columnNum, char)
}

(Seq[Token], TokenizerState) numberErrorAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    throw TokenizerException(TokenizerExceptionType.BadCharInNumber, state.lineNum, state.columnNum, char)
}

(Seq[Token], TokenizerState) nameErrorAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    throw TokenizerException(TokenizerExceptionType.BadCharInName, state.lineNum, state.columnNum, char)
}

(Seq[Token], TokenizerState) symbolErrorAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    throw TokenizerException(TokenizerExceptionType.BadCharInSymbol, state.lineNum, state.columnNum, char)
}

(Seq[Token], TokenizerState) commentAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    (Nil, tokenizerState)
}

Seq[TokenType] parseSymbols(TokenizerState tokenizerState)
{
    tokenizerState.symbolText
        .split((String text)
        {
            text.size - 0.until(text.size).find((Int i)
                {
                    TokenType.get(text.split(0, text.size - i))
                })
        })
        .map((String text)
        {
            TokenType.get(text).getOrElse(throw TokenizerException(
                TokenizerExceptionType.UnknownSymbol,
                tokenizerState.lineNum
                tokenizerState.symbolStartColumn,
                tokenizerState.symbolText))
        })
}

(Seq[Token], TokenizerState) unpackTokens(TokenizerState tokenizerState, TokenState previousTokenState)
{
    if (tokenizerState.symbolText.size > 0)
    {
        Seq[TokenType] tokenTypes = switch (previousTokenState)
        case (TokenState.Float)
        {
            Seq(TokenType.Float)
        }
        case (TokenState.Int)
        {
            Seq(TokenType.Int)
        }
        case (TokenState.Name)
        {
            // Check if this is a keyword and use the appropriate token type
            Seq(TokenType.get(tokenizerState.symbolText).getOrElse(TokenType.Name))
        }
        case (TokenState.String)
        {
            Seq(TokenType.String)
        }
        case (TokenState.Symbol)
        {
            parseSymbols(tokenizerState)
        }
        case
        {
            Nil
        }

        Seq[Token] tokens = tokenTypes.map((TokenType type)
            {
                Token(type, tokenizerState.symbolText, tokenizerState.lineNum, tokenizerState.symbolStartColumn)
            })

        TokenizerState newState = copy (tokenizerState)
        {
            symbolText = ""
            symbolStartColumn = columnNum
        }

        (tokens, newState)
    }
    else
    {
        (Nil, tokenizerState)
    }
}


(Seq[Token], TokenizerState) symbolAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    (Seq[Token] tokens, TokenizerState unpackedState) = if (previousTokenState == TokenState.Symbol)
    {
        (Nil, tokenizerState)
    }
    else
    {
        unpackTokens(tokenizerState, previousTokenState)
    }

    TokenizerState newState = copy (unpackedState)
    {
        symbolText += char
        columnNum += 1
    }

    (tokens, newState)
}

(Seq[Token], TokenizerState) whitespaceAction(
    TokenState previousTokenState,
    (String-1 char, TokenizerState tokenizerState))
{
    (Seq[Token] previousTokens, TokenizerState unpackedState) = unpackTokens(tokenizerState, previousTokenState)
    (Option[Token] maybeToken, TokenizerState newTokenizerState) = if (char == "\n")
    {
        Token newToken = Some(Token(TokenType.Newline, "\\n", unpackedState.lineNum, unpackedState.columnNum))
        TokenizerState newState = copy (unpackedState)
        {
            lineNum += 1
            symbolStartColumn = 1
            columnNum = 1
        }
        (Some(newToken), newState)
    }
    else
    {
        TokenizerState newState = copy (unpackedState)
        {
            symbolStartColumn += 1
            columnNum += 1
        }
        (None, newState)
    }

    (previousTokens.append(maybeToken), newTokenizerState)
}

(Seq[Token], TokenizerState) step(String-1 char, (Seq[Token] tokens, TokenizerState state))
{
    (Seq[Token] newTokens, TokenizerState newState) = FSM.step((char, state))

    (tokens.append(newTokens), newState)
}

Seq[Token] tokenize(String plaintext) throws TokenizerException
{
    (Seq[Token] tokens, TokenizerState state) = (plaintext + "\n").fold((Nil, TokenizerState("", 1, 1, 1)), step)
    tokens
}
