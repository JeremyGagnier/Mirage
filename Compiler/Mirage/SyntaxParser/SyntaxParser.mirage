object SyntaxParser

Seq[GrammarSymbol-Not[Maybe, Base]]-Distinct TransitionalSymbols = GrammarSymbol.symbols
    .filter((GrammarSymbol symbol)
    {
        switch (symbol)
        case (GrammarSymbol.Maybe _)
        case (GrammarSymbol.Base _)
        {
            false
        }
        case
        {
            true
        }
    })

Seq[Grammar] getPossibleRules(
    GrammarSymbol-Not[Maybe, Base] transitionalSymbol,
    Seq[GrammarSymbol.Base] lookahead,
    Seq[Grammar] seen = Seq())
{
    if (seen.contains(transitionalSymbol))
    {
        throw Exception("Failed to build rule table from grammar. Transitional symbol {0} loops to itself."
            .format(Seq(transitionalSymbol.toString())))
    }

    Grammar.symbols
        .filter((Grammar rule)
        {
            (GrammarSymbol fromSymbol, Seq[GrammarSymbol] toSymbols) = rule.value
            fromSymbol == transitionalSymbol and ruleMatchesLookahead(toSymbols, Seq(lookahead), seen + rule)
        })
}

// Recursively computes if the toSymbols satisfy the lookahead.
Bool|Seq[GrammarSymbol.Base] ruleMatchesLookahead(
    Seq[GrammarSymbol] toSymbols,
    Seq[GrammarSymbol.Base] lookahead,
    Seq[Grammar] seen)
{
    // This if else if is exhaustive. If something underlying changes to make it not exhaustive then this will fail to
    // compile because not all paths return a value. This reveals that there may be a new bug.
    if (lookahead.isEmpty())
    {
        // If we have exhausted lookahead without returning false then the rule matches.
        true
    }
    else if (toSymbols.isEmpty())
    {
        lookahead
    }
    else if (lookahead.head == toSymbols.head)
    {
        ruleMatchesLookahead(toSymbols.tail, lookahead.tail, seen)
    }
    else if (TransitionalSymbols.contains(toSymbols.head))
    {
        // TODO: Verify that this getPossibleRules -> ruleMatchesLookahead recursive logic is good.
        Seq[Grammar] possibleRulesFromOneSymbol = getPossibleRules(toSymbols.head, Seq(lookahead.head), seen)
        possibleRulesFromOneSymbol.exists((Grammar rule)
        {
            (GrammarSymbol _, Seq[GrammarSymbol] toSymbols2) = rule.value
            switch (ruleMatchesLookahead(toSymbols2.tail, lookahead.tail, seen + rule))
            case (Seq[GrammarSymbol.Base] restOfLookahead)
            {
                switch(ruleMatchesLookahead(toSymbols.tail, restOfLookahead, seen))
                case (Seq[GrammarSymbol.Base] restOfLookahead)
                {
                    false
                }
                case (Bool value)
                {
                    value
                }
            }
            case (Bool value)
            {
                value
            }
        })
    }
    else if (GrammarSymbol.Maybe.contains(toSymbols.head))
    {
        switch(ruleMatchesLookahead(toSymbols.head.inner + toSymbols.tail, lookahead, seen))
        case (Seq[GrammarSymbol.Base] _)
        case (false)
        {
            ruleMatchesLookahead(toSymbols.tail, lookahead, seen)
        }
        case (true)
        {
            true
        }
    }
    else if (GrammarSymbol.Base.contains(toSymbols.head))
    {
        false
    }
}

// This is an LL(n) algorithm. It generates a recursive lookahead table from the Grammar enum
RuleTable buildRuleTable(Seq[GrammarSymbol.Base] lookahead = Seq())
{
    GrammarSymbol.Base.symbols.flatMapToDict((GrammarSymbol.Base tokenType)
    {
        Seq[GrammarSymbol.Base] newLookahead = lookahead + tokenType
        Dict[GrammarSymbol-Not[Maybe, Base], Grammar|RuleTable] symbolToRule = TransitionalSymbols
            .flatMapToDict((GrammarSymbol-Not[Maybe, Base] transitionalSymbol)
            {
                Seq[Grammar] validTransitions = getPossibleRules(transitionalSymbol, newLookahead)
                if (validTransitions.isEmpty())
                {
                    None
                }
                else if (validTransitions.length == 1)
                {
                    Some((transitionalSymbol, validTransitions.head))
                }
                else
                {
                    // TODO: Narrow possible rules
                    Some((transitionalSymbol, buildRuleTable(newLookahead)))
                }
            })

        if (symbolToRule.isEmpty())
        {
            None
        }
        else
        {
            Some((tokenType, symbolToRule))
        }
    })
}

RuleTable fullRuleTable = buildRuleTable()

Option[Grammar] findRule(GrammarSymbol stackSymbol, Seq[Token] tokens, Int tokenIndex, RuleTable currentTable)
{
    if (tokenIndex > tokens.length)
    {
        throw Exception(...)
    }
    Token currentToken = tokens.get(tokenIndex)

    GrammarSymbol-Not[Maybe] currentSymbol = if (GrammarSymbol.Maybe.contains(stackSymbol))
    {
        stackSymbol.inner
    }
    else
    {
        stackSymbol
    }

    if (not currentTable.table.contains(currentToken) or
        not currentTable.table.get(currentToken).contains(currentSymbol))
    {
        None
    }
    else
    {
        Grammar|RuleTable tableOrRule = currentTable.get(currentToken).get(currentSymbol)
        switch (tableOrRule)
        case (RuleTable table)
        {
            findRule(currentSymbol, tokens, tokenIndex + 1, table)
        }
        case (Grammar rule)
        {
            Some(rule)
        }
    }
}

(Int, AST|Token) buildAstHelper(Seq[Token] tokens, GrammarSymbol stackSymbol, Int tokenIndex)
{
    if (GrammarSymbol.Base.contains(stackSymbol))
    {
        if (tokenIndex < tokens.length)
        {
            if (tokens.get(tokenIndex).type == stackSymbol.inner)
            {
                (tokenIndex + 1, tokens.get(tokenIndex))
            }
            else
            {
                throw Exception(...)
            }
        }
        else
        {
            throw Exception(...)
        }
    }
    else
    {
        Option[Grammar] ruleOpt = findRule(stackSymbol, tokens, tokenIndex, fullRuleTable)
        Grammar rule = if (ruleOpt.isDefined)
        {
            ruleOpt.get()
        }
        else if (GrammarSymbol.Maybe.contains(stackSymbol))
        {
            Grammar.MaybeToNothing
        }
        else
        {
            throw Exception(...)
        }
        (GrammarSymbol _, Seq[GrammarSymbol] newSymbols) = rule.value

        (Int newTokenIndex, Seq[AST|Token] astSeq) = newSymbols
            .fold((tokenIndex, Seq()), ((Int lastTokenIndex, Seq[AST|Token] lastAstSeq), GrammarSymbol nextSymbol)
            {
                (nextTokenIndex, astNew) = buildAstHelper(tokens, nextSymbol, lastTokenIndex)
                (nextTokenIndex, lastAstSeq + astNew)
            })

        (newTokenIndex, AST(rule, astSeq))
    }
}

public AST buildAbstractSyntaxTree(Seq[Token] tokens)
{
    (Int _, AST|Token maybeAst) buildAstHelper(tokens, GrammarSymbol.File, 0)
    switch (maybeAst)
    case (AST ast)
    {
        ast
    }
    case
    {
        throw Exception(...)
    }
}
